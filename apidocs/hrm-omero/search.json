[{"fullname": "hrm_omero", "modulename": "hrm_omero", "qualname": "", "type": "module", "doc": "<p>OMERO connector for the Huygens Remote Manager (HRM).</p>\n\n<h1 id=\"the-hrm-omero-connector\">The HRM-OMERO connector</h1>\n\n<p>This project provides a connector to allow for communication between an <a href=\"https://huygens-rm.org/\">HRM (Huygens\nRemote Manager)</a> and an <a href=\"https://www.openmicroscopy.org/omero/\">OMERO server</a>.</p>\n\n<p>Its purpose is to simplify the data transfer by allowing raw images to be downloaded\nfrom OMERO as well as uploading deconvolution results back to OMERO directly from within\nthe HRM web interface.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<h3 id=\"distributions-that-include-python-36-or-newer-eg-ubuntu-2004\">Distributions that include Python 3.6 or newer (e.g. Ubuntu 20.04)</h3>\n\n<div class=\"codehilite\"><pre><span></span><code>pip install hrm-omero\n</code></pre></div>\n\n<h3 id=\"centos-6\">CentOS 6</h3>\n\n<p><a href=\"https://wiki.centos.org/About/Product\">CentOS 6</a> is EOL since 2020-11-30, so you should really consider upgrading to a newer\nrelease. However, we know that sometimes this is not easily doable due to dependencies,\nhardware support or whatever reason - so here are instructions to make the connector\nwork on that old distribution.</p>\n\n<p>It's strongly recommended to use <a href=\"https://github.com/pyenv/pyenv\">pyenv</a> for installing <em>Python 3.6</em>, which is the\nabsolute minimum for using the HRM-OMERO connector (or its actual dependencies, to be\nfully correct). In case you don't want <em>pyenv</em> to mess with your system setup, you can\nsimply ask it to install that version somewhere and then only create a <em>virtual\nenvironment</em> from it using the <code>--copies</code> flag - this will result in a standalone\nsetup that won't affect anything else on the system.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># install the build-time requirements for Python 3.6 and Java 1.8 for Bio-Formats</span>\nsudo yum install openssl-devel readline-devel gcc-c++ java-1.8.0-openjdk\n\n<span class=\"c1\"># get pyenv and put it into your home directory or wherever you prefer it to be</span>\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\n<span class=\"c1\"># activate pyenv *FOR THIS SHELL ONLY* (needs to be done whenever you want to use it)</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv&quot;</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">&quot;</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">&quot;</span><span class=\"k\">$(</span>pyenv init --path<span class=\"k\">)</span><span class=\"s2\">&quot;</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">&quot;</span><span class=\"k\">$(</span>pyenv init -<span class=\"k\">)</span><span class=\"s2\">&quot;</span>\n\n<span class=\"c1\"># ask pyenv to install Python 3.6.15 (will end up in &quot;~/.pyenv/versions/3.6.15/&quot;)</span>\npyenv install <span class=\"m\">3</span>.6.15  <span class=\"c1\"># takes a bit (compiling...)</span>\n\n<span class=\"c1\"># create a bare, stand-alone Python 3.6 virtual environment</span>\n~/.pyenv/versions/3.6.15/bin/python -m venv --copies /opt/venvs/hrm-omero\n\n<span class=\"c1\"># now you can install the connector into this virtual environment - please note that the</span>\n<span class=\"c1\"># installation takes quite a while (~15min) as it needs to build the ZeroC Ice bindings</span>\n/opt/venvs/hrm-omero/bin/pip install hrm-omero\n\n<span class=\"c1\"># from now on you can simply call the connector using its full path, there is no need</span>\n<span class=\"c1\"># to pre-activate the virtual environment - you could even drop your pyenv completely:</span>\n/opt/venvs/hrm-omero/bin/ome-hrm --help\n\n<span class=\"c1\"># this is even usable as a drop-in replacement for the legacy `ome_hrm.py` script:</span>\n<span class=\"nb\">cd</span> <span class=\"nv\">$PATH_TO_YOUR_HRM_INSTALLATION</span>/bin\nmv <span class=\"s2\">&quot;ome_hrm.py&quot;</span> <span class=\"s2\">&quot;__old__ome_hrm.py&quot;</span>\nln -s <span class=\"s2\">&quot;/opt/venvs/hrm-omero/bin/ome-hrm&quot;</span> <span class=\"s2\">&quot;ome_hrm.py&quot;</span>\n</code></pre></div>\n\n<h2 id=\"debugging\">Debugging</h2>\n\n<p>By default the connector will be rather silent as otherwise the log files will be\ncluttered up quite a bit on a production system. However, it is possible to increase the\nlog level by specifying <code>-v</code>, <code>-vv</code> and so on.</p>\n\n<p>Currently it is not yet possible to ajust the log level that is being used when operated\nthrough the HRM web interface (which is the default). To do so, have a look in the\n<code>hrm_omero.cli.run_task()</code> function. Log messages produced by the connector when called\nby HRM will usually end up in the web server's error log (as they go to <code>stderr</code>).</p>\n\n<h2 id=\"example-usage\">Example Usage</h2>\n\n<p>Store you username and password in variables:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">read</span> OMEROUSER\n<span class=\"nb\">read</span> OMEROPW\n</code></pre></div>\n\n<h3 id=\"verifying-credentials\">Verifying Credentials</h3>\n\n<div class=\"codehilite\"><pre><span></span><code>ome-hrm <span class=\"se\">\\</span>\n    --user <span class=\"nv\">$OMEROUSER</span> <span class=\"se\">\\</span>\n    --password <span class=\"nv\">$OMEROPW</span> <span class=\"se\">\\</span>\n    checkCredentials\n</code></pre></div>\n\n<h3 id=\"fetching-omero-tree-information\">Fetching OMERO tree information</h3>\n\n<p>Set the <code>--id</code> parameter according to what part of the tree should be retrieved:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">OMERO_ID</span><span class=\"o\">=</span><span class=\"s2\">&quot;ROOT&quot;</span>                <span class=\"c1\"># fetches the base tree view for the current user</span>\n<span class=\"nv\">OMERO_ID</span><span class=\"o\">=</span><span class=\"s2\">&quot;G:4:Experimenter:9&quot;</span>  <span class=\"c1\"># fetches the projects of user &#39;9&#39; in group &#39;4&#39;</span>\n<span class=\"nv\">OMERO_ID</span><span class=\"o\">=</span><span class=\"s2\">&quot;G:4:Project:12345&quot;</span>   <span class=\"c1\"># fetches the datasets of project &#39;12345&#39;</span>\n<span class=\"nv\">OMERO_ID</span><span class=\"o\">=</span><span class=\"s2\">&quot;G:4:Dataset:65432&quot;</span>   <span class=\"c1\"># lists the images of dataset &#39;65432&#39;</span>\n</code></pre></div>\n\n<p>Then run the actual command to fetch the information, the result will be a JSON tree:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>ome-hrm <span class=\"se\">\\</span>\n    --user <span class=\"nv\">$OMEROUSER</span> <span class=\"se\">\\</span>\n    --password <span class=\"nv\">$OMEROPW</span> <span class=\"se\">\\</span>\n    retrieveChildren <span class=\"se\">\\</span>\n    --id <span class=\"s2\">&quot;</span><span class=\"nv\">$OMERO_ID</span><span class=\"s2\">&quot;</span>\n</code></pre></div>\n\n<p>For example this could be the output when requesting <code>\"G:4:Dataset:65432\"</code>:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;children&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"nt\">&quot;class&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Image&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;G:4:Image:1311448&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;label&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;4321_mko_ctx_77.tif&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;somebody&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;children&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"nt\">&quot;class&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Image&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;G:4:Image:1566150&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;label&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;test-image.tif&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;somebody&quot;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n\n<h3 id=\"downloading-an-image-from-omero\">Downloading an image from OMERO</h3>\n\n<p>This will fetch the second image from the example tree above and store it in <code>/tmp/</code>:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>ome-hrm <span class=\"se\">\\</span>\n    --user <span class=\"nv\">$OMEROUSER</span> <span class=\"se\">\\</span>\n    --password <span class=\"nv\">$OMEROPW</span> <span class=\"se\">\\</span>\n    OMEROtoHRM <span class=\"se\">\\</span>\n    --imageid <span class=\"s2\">&quot;G:4:Image:1566150&quot;</span> <span class=\"se\">\\</span>\n    --dest /tmp/\n</code></pre></div>\n\n<h3 id=\"uploading-an-image-from-the-local-file-system-to-omero\">Uploading an image from the local file system to OMERO</h3>\n\n<p>The command below will import a local image file into the example dataset from above:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>ome-hrm <span class=\"se\">\\</span>\n    --user <span class=\"nv\">$OMEROUSER</span> <span class=\"se\">\\</span>\n    --password <span class=\"nv\">$OMEROPW</span> <span class=\"se\">\\</span>\n    HRMtoOMERO <span class=\"se\">\\</span>\n    --dset <span class=\"s2\">&quot;G:4:Dataset:65432&quot;</span> <span class=\"se\">\\</span>\n    --file test-image.tif\n</code></pre></div>\n"}, {"fullname": "hrm_omero.cli", "modulename": "hrm_omero.cli", "qualname": "", "type": "module", "doc": "<p>Command-line interface related functions.</p>\n"}, {"fullname": "hrm_omero.cli.bool_to_exitstatus", "modulename": "hrm_omero.cli", "qualname": "bool_to_exitstatus", "type": "function", "doc": "<p>Convert a boolean to a POSIX process exit code.</p>\n\n<p>As boolean values in Python are a subset of int, <code>True</code> corresponds to the int value\n'1', which is the opposite of a successful POSIX return code. Therefore, this\nfunction simply inverts the boolean value to turn it into a proper exit code. In\ncase the provided value is not of type <code>bool</code> it will be returned unchanged.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong> (bool or int):\nThe value to be converted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: 0 in case <code>value</code> is <code>True</code>, 1 in case <code>value</code> is <code>False</code> and <code>value</code> itself in\ncase it is not a bool.</li>\n</ul>\n", "parameters": ["value"], "funcdef": "def"}, {"fullname": "hrm_omero.cli.parse_arguments", "modulename": "hrm_omero.cli", "qualname": "parse_arguments", "type": "function", "doc": "<p>Parse the commandline arguments.</p>\n", "parameters": ["args"], "funcdef": "def"}, {"fullname": "hrm_omero.cli.run_task", "modulename": "hrm_omero.cli", "qualname": "run_task", "type": "function", "doc": "<p>Parse commandline arguments and initiate the requested tasks.</p>\n", "parameters": ["args"], "funcdef": "def"}, {"fullname": "hrm_omero.cli.main", "modulename": "hrm_omero.cli", "qualname": "main", "type": "function", "doc": "<p>Wrapper to call the run_task() function and return its exit code.</p>\n", "parameters": ["args"], "funcdef": "def"}, {"fullname": "hrm_omero.formatting", "modulename": "hrm_omero.formatting", "qualname": "", "type": "module", "doc": "<p>Output formatting functions.</p>\n"}, {"fullname": "hrm_omero.formatting.tree_to_json", "modulename": "hrm_omero.formatting", "qualname": "tree_to_json", "type": "function", "doc": "<p>Create a JSON object with a given format from a tree.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj_tree</strong> (list(dict)):\nThe object tree as generated by <code>hrm_omero.tree.gen_children()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The JSON-formatted representation of the object tree.</li>\n</ul>\n", "parameters": ["obj_tree"], "funcdef": "def"}, {"fullname": "hrm_omero.formatting.print_children_json", "modulename": "hrm_omero.formatting", "qualname": "print_children_json", "type": "function", "doc": "<p>Print the child nodes of the given ID in JSON format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe OMERO object ID string (e.g. <code>G:23:Image:42</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True in case printing the nodes was successful, False otherwise.</li>\n</ul>\n", "parameters": ["conn", "id_str"], "funcdef": "def"}, {"fullname": "hrm_omero.hrm", "modulename": "hrm_omero.hrm", "qualname": "", "type": "module", "doc": "<p>Helper functions to interact with the HRM.</p>\n"}, {"fullname": "hrm_omero.hrm.parse_config", "modulename": "hrm_omero.hrm", "qualname": "parse_config", "type": "function", "doc": "<p>Assemble a dict from the HRM config file (shell syntax).</p>\n\n<p>Usually, the config is located at /etc/hrm.conf and written in shell syntax as\nthis file simply gets sourced by the bash init script and other shell based\ntools.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nThe name of the configuration file to be parsed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dict with the parsed configuration items.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>SyntaxError</strong>: Raised in case the given configuration file can't be parsed correctly.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parse_config</span><span class=\"p\">(</span><span class=\"s1\">&#39;/etc/hrm.conf&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_DATA&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/export/hrm_data&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_DEST&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;dst&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_HOME&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/var/www/hrm&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_LOG&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/var/log/hrm&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_SOURCE&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;src&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;OMERO_HOSTNAME&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;omero.mynetwork.xy&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;OMERO_PKG&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/opt/OMERO/OMERO.server&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;OMERO_PORT&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;4064&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;PHP_CLI&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/usr/local/php/bin/php&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;SUSER&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;hrm&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n</code></pre></div>\n", "parameters": ["filename"], "funcdef": "def"}, {"fullname": "hrm_omero.hrm.check_config", "modulename": "hrm_omero.hrm", "qualname": "check_config", "type": "function", "doc": "<p>Check the config dict for required entries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config</strong> (dict):\nA dict with a parsed configuration, as returned by <code>parse_hrm_conf()</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>SyntaxError</strong>: Raised in case one of the required configuration items is missing.</li>\n</ul>\n", "parameters": ["config"], "funcdef": "def"}, {"fullname": "hrm_omero.hrm.job_parameter_summary", "modulename": "hrm_omero.hrm", "qualname": "job_parameter_summary", "type": "function", "doc": "<p>Generate a parameter summary from the HRM-generated HTML file.</p>\n\n<p>Parse the HTML file generated by the HRM containing the parameter summary and\ngenerate a plain-text version of it. The HTML file is assumed to contain three\n<code>&lt;table&gt;</code> items that contain a single <code>&lt;tr&gt;</code> column with the table title in the\nfirst row, the second row is ignored (column legend) and the actual parameters in\nfour columns in each of the subsequent rows, e.g. something of this form:</p>\n\n<pre><code>|___________________title_________________|\n|_________________(ignored)_______________|\n| parameter | channel | (ignored) | value |\n...\n| parameter | channel | (ignored) | value |\n-------------------------------------------\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fname</strong> (str):\nThe filename of the job's HTML parameter summary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The formatted string containing the parameter summary.</li>\n</ul>\n", "parameters": ["fname"], "funcdef": "def"}, {"fullname": "hrm_omero.omero", "modulename": "hrm_omero.omero", "qualname": "", "type": "module", "doc": "<p>Functions related to direct interaction with OMERO.</p>\n"}, {"fullname": "hrm_omero.omero.connect", "modulename": "hrm_omero.omero", "qualname": "connect", "type": "function", "doc": "<p>Establish the connection to an OMERO server.</p>\n\n<p>NOTE: this does NOT check credentials - it only talks to the OMERO server to create\nthe connection object. To verify a login, use <code>check_credentials()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>user</strong> (str):\nThe OMERO user name (e.g. <code>demo_user_01</code>).</li>\n<li><strong>passwd</strong> (str):\nThe corresponding OMERO user password.</li>\n<li><strong>host</strong> (str):\nThe OMERO server hostname or IP address.</li>\n<li><strong>port</strong> (int, optional):\nThe OMERO port number, by default 4064.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>omero.gateway.BlitzGateway</strong>: The OMERO connection object.</li>\n</ul>\n", "parameters": ["user", "passwd", "host", "port"], "funcdef": "def"}, {"fullname": "hrm_omero.omero.check_credentials", "modulename": "hrm_omero.omero", "qualname": "check_credentials", "type": "function", "doc": "<p>Check if supplied credentials are valid and print a message to stdout.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe connection object as returned by <code>connect()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if connecting was successful (i.e. credentials are correct), False\notherwise.</li>\n</ul>\n", "parameters": ["conn"], "funcdef": "def"}, {"fullname": "hrm_omero.transfer", "modulename": "hrm_omero.transfer", "qualname": "", "type": "module", "doc": "<p>Transfer related functions.</p>\n"}, {"fullname": "hrm_omero.transfer.from_omero", "modulename": "hrm_omero.transfer", "qualname": "from_omero", "type": "function", "doc": "<p>Download the corresponding original file(s) from an image ID.</p>\n\n<p>This only works for image IDs that were created with OMERO 5.0 or later as previous\nversions don't have an \"original file\" linked to an image.</p>\n\n<p>Note that files will be downloaded with their original name, which is not\nnecessarily the name shown by OMERO, e.g. if an image name was changed in OMERO. To\nkeep filesets consistent, we have to preserve the original names!</p>\n\n<p>In addition to the original file(s), it also downloads a thumbnail of the requested\nfile from OMERO and puts it into the appropriate place so HRM will show it as a\npreview until the user hits \"re-generate preview\".</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe ID of the OMERO image (e.g. <code>G:23:Image:42</code>).</li>\n<li><strong>dest</strong> (str):\nThe destination path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True in case the download was successful, False otherwise.</li>\n</ul>\n", "parameters": ["conn", "id_str", "dest"], "funcdef": "def"}, {"fullname": "hrm_omero.transfer.fetch_thumbnail", "modulename": "hrm_omero.transfer", "qualname": "fetch_thumbnail", "type": "function", "doc": "<p>Download the thumbnail of a given image from OMERO.</p>\n\n<p>In case PIL (Python Imaging Library) is installed, download the thumbnail of a given\nOMERO image and place it as preview in the corresponding HRM directory.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>image_id</strong> (str):\nAn OMERO object ID of an image (e.g. '102').</li>\n<li><strong>dest</strong> (str):\nThe destination filename.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True in case the download was successful, False otherwise.</li>\n</ul>\n", "parameters": ["conn", "image_id", "dest"], "funcdef": "def"}, {"fullname": "hrm_omero.transfer.to_omero", "modulename": "hrm_omero.transfer", "qualname": "to_omero", "type": "function", "doc": "<p>Upload an image into a specific dataset in OMERO.</p>\n\n<p>In case we know from the suffix that a given  format is not supported by OMERO, the\nupload will not be initiated at all (e.g. for SVI-HDF5, having the suffix '.h5').</p>\n\n<p>The import itself is done by instantiating the CLI class, assembling the required\narguments, and finally running <code>cli.invoke()</code>. This eventually triggers the\n<code>importer()</code> method defined in <a href=\"https://github.com/ome/omero-py/blob/master/src/omero/plugins/import.py\">OMERO's Python bindings</a>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe ID of the target dataset in OMERO (e.g. <code>G:7:Dataset:23</code>).</li>\n<li><strong>image_file</strong> (str):\nThe local image file including the full path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True in case of success, False otherwise.</li>\n</ul>\n", "parameters": ["conn", "id_str", "image_file"], "funcdef": "def"}, {"fullname": "hrm_omero.tree", "modulename": "hrm_omero.tree", "qualname": "", "type": "module", "doc": "<p>Functions related to OMERO's tree view.</p>\n"}, {"fullname": "hrm_omero.tree.gen_obj_dict", "modulename": "hrm_omero.tree", "qualname": "gen_obj_dict", "type": "function", "doc": "<p>Create a dict from an OMERO object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong> (FIXME):\nThe OMERO object to process.</li>\n<li><strong>id_pfx</strong> (str, optional):\nA string prefix that will be added to the <code>id</code> value, by default ''.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary with the following structure:</li>\n</ul>\n\n<pre><code>    {\n        'children': [],\n        'id': 'Project:1154',\n        'label': 'HRM_TESTDATA',\n        'owner': u'demo01',\n        'class': 'Project'\n    }\n</code></pre>\n", "parameters": ["obj", "id_pfx"], "funcdef": "def"}, {"fullname": "hrm_omero.tree.gen_children", "modulename": "hrm_omero.tree", "qualname": "gen_children", "type": "function", "doc": "<p>Get the children for a given node.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nOMERO object ID string (e.g. \"<code>G:23:Image:42</code>\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list with children nodes (of type <code>dict</code>), having the <code>load_on_demand</code>\nproperty set to <code>True</code> required by the jqTree JavaScript library.</li>\n</ul>\n", "parameters": ["conn", "id_str"], "funcdef": "def"}, {"fullname": "hrm_omero.tree.gen_base_tree", "modulename": "hrm_omero.tree", "qualname": "gen_base_tree", "type": "function", "doc": "<p>Generate all group trees with their members as the basic tree.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of grouptree dicts as generated by <code>gen_group_tree()</code>.</li>\n</ul>\n", "parameters": ["conn"], "funcdef": "def"}, {"fullname": "hrm_omero.tree.gen_group_tree", "modulename": "hrm_omero.tree", "qualname": "gen_group_tree", "type": "function", "doc": "<p>Create the tree nodes for a group and its members.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>group</strong> (omero.gateway._ExperimenterGroupWrapper, optional):\nThe group object to generate the tree for, by default None which will result in\nthe group being derived from the current connection's context.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A nested dict of the given group (or the default group if not specified\nexplicitly) and its members as a list of dicts in the <code>children</code> item, starting\nwith the current user as the first entry.</li>\n</ul>\n", "parameters": ["conn", "group"], "funcdef": "def"}]