[{"fullname": "hrm_omero", "modulename": "hrm_omero", "qualname": "", "type": "module", "doc": "<p>OMERO connector for the Huygens Remote Manager (HRM).</p>\n\n<h1 id=\"the-hrm-omero-connector\">The HRM-OMERO connector</h1>\n\n<p>This project provides a connector to allow for communication between an <a href=\"https://github.com/aarpon/hrm/blob/master/bin/ome_hrm.py\">HRM (Huygens\nRemote Manager)</a> and an <a href=\"https://github.com/aarpon/hrm/blob/master/bin/hrm_config.py\">OMERO server</a>.</p>\n\n<p>Its purpose is to simplify the data transfer by allowing raw images to be downloaded\nfrom OMERO as well as uploading deconvolution results back to OMERO directly from within\nthe HRM web interface.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<h3 id=\"distributions-that-include-python-36-or-newer-eg-ubuntu-2004\">Distributions that include Python 3.6 or newer (e.g. Ubuntu 20.04)</h3>\n\n<div class=\"codehilite\"><pre><span></span><code>pip install hrm-omero\n</code></pre></div>\n\n<h3 id=\"centos-6\">CentOS 6</h3>\n\n<p><a href=\"https://wiki.centos.org/About/Product\">CentOS 6</a> is EOL since 2020-11-30, so you should really consider upgrading to a newer\nrelease. However, we know that sometimes this is not easily doable due to dependencies,\nhardware support or whatever reason - so here are instructions to make the connector\nwork on that old distribution.</p>\n\n<p>It's strongly recommended to use <a href=\"https://github.com/pyenv/pyenv\">pyenv</a> for installing <em>Python 3.6</em>, which is the\nabsolute minimum for using the HRM-OMERO connector (or its actual dependencies, to be\nfully correct). In case you don't want <em>pyenv</em> to mess with your system setup, you can\nsimply ask it to install that version somewhere and then only create a <em>virtual\nenvironment</em> from it using the <code>--copies</code> flag - this will result in a standalone\nsetup that won't affect anything else on the system.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># install the build-time requirements for Python 3.6 and Java 1.8 for Bio-Formats</span>\nsudo yum install openssl-devel readline-devel gcc-c++ java-1.8.0-openjdk\n\n<span class=\"c1\"># get pyenv and put it into your home directory or wherever you prefer it to be</span>\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\n<span class=\"c1\"># activate pyenv *FOR THIS SHELL ONLY* (needs to be done whenever you want to use it)</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv&quot;</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">&quot;</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">&quot;</span><span class=\"k\">$(</span>pyenv init --path<span class=\"k\">)</span><span class=\"s2\">&quot;</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">&quot;</span><span class=\"k\">$(</span>pyenv init -<span class=\"k\">)</span><span class=\"s2\">&quot;</span>\n\n<span class=\"c1\"># ask pyenv to install Python 3.6.15 (will end up in &quot;~/.pyenv/versions/3.6.15/&quot;)</span>\npyenv install <span class=\"m\">3</span>.6.15  <span class=\"c1\"># takes a bit (compiling...)</span>\n\n<span class=\"c1\"># create a bare, stand-alone Python 3.6 virtual environment</span>\n~/.pyenv/versions/3.6.15/bin/python -m venv --copies /opt/venvs/hrm-omero\n\n<span class=\"c1\"># now you can install the connector into this virtual environment - please note that the</span>\n<span class=\"c1\"># installation takes quite a while (~15min) as it needs to build the ZeroC Ice bindings</span>\n/opt/venvs/hrm-omero/bin/pip install hrm-omero\n\n<span class=\"c1\"># from now on you can simply call the connector using its full path, there is no need</span>\n<span class=\"c1\"># to pre-activate the virtual environment - you could even drop your pyenv completely:</span>\n/opt/venvs/hrm-omero/bin/ome-hrm --help\n\n<span class=\"c1\"># this is even usable as a drop-in replacement for the legacy `ome_hrm.py` script:</span>\n<span class=\"nb\">cd</span> <span class=\"nv\">$PATH_TO_YOUR_HRM_INSTALLATION</span>/bin\nmv <span class=\"s2\">&quot;ome_hrm.py&quot;</span> <span class=\"s2\">&quot;__old__ome_hrm.py&quot;</span>\nln -s <span class=\"s2\">&quot;/opt/venvs/hrm-omero/bin/ome-hrm&quot;</span> <span class=\"s2\">&quot;ome_hrm.py&quot;</span>\n</code></pre></div>\n\n<h2 id=\"debugging\">Debugging</h2>\n\n<p>By default the connector will be rather silent as otherwise the log files will be\ncluttered up quite a bit on a production system. However, it is possible to increase the\nlog level by specifying <code>-v</code>, <code>-vv</code> and so on.</p>\n\n<p>Currently it is not yet possible to ajust the log level that is being used when operated\nthrough the HRM web interface (which is the default). To do so, have a look in the\n<code>hrm_omero.cli.run_task()</code> function. Log messages produced by the connector when called\nby HRM will usually end up in the web server's error log (as they go to <code>stderr</code>).</p>\n\n<h2 id=\"example-usage\">Example Usage</h2>\n\n<p>Store you username and password in variables:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">read</span> OMEROUSER\n<span class=\"nb\">read</span> OMEROPW\n</code></pre></div>\n\n<h3 id=\"verifying-credentials\">Verifying Credentials</h3>\n\n<div class=\"codehilite\"><pre><span></span><code>ome-hrm <span class=\"se\">\\</span>\n    --user <span class=\"nv\">$OMEROUSER</span> <span class=\"se\">\\</span>\n    --password <span class=\"nv\">$OMEROPW</span> <span class=\"se\">\\</span>\n    checkCredentials\n</code></pre></div>\n\n<h3 id=\"fetching-omero-tree-information\">Fetching OMERO tree information</h3>\n\n<p>Set the <code>--id</code> parameter according to what part of the tree should be retrieved:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">OMERO_ID</span><span class=\"o\">=</span><span class=\"s2\">&quot;ROOT&quot;</span>                <span class=\"c1\"># fetches the base tree view for the current user</span>\n<span class=\"nv\">OMERO_ID</span><span class=\"o\">=</span><span class=\"s2\">&quot;G:4:Experimenter:9&quot;</span>  <span class=\"c1\"># fetches the projects of user &#39;9&#39; in group &#39;4&#39;</span>\n<span class=\"nv\">OMERO_ID</span><span class=\"o\">=</span><span class=\"s2\">&quot;G:4:Project:12345&quot;</span>   <span class=\"c1\"># fetches the datasets of project &#39;12345&#39;</span>\n<span class=\"nv\">OMERO_ID</span><span class=\"o\">=</span><span class=\"s2\">&quot;G:4:Dataset:65432&quot;</span>   <span class=\"c1\"># lists the images of dataset &#39;65432&#39;</span>\n</code></pre></div>\n\n<p>Then run the actual command to fetch the information, the result will be a JSON tree:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>ome-hrm <span class=\"se\">\\</span>\n    --user <span class=\"nv\">$OMEROUSER</span> <span class=\"se\">\\</span>\n    --password <span class=\"nv\">$OMEROPW</span> <span class=\"se\">\\</span>\n    retrieveChildren <span class=\"se\">\\</span>\n    --id <span class=\"s2\">&quot;</span><span class=\"nv\">$OMERO_ID</span><span class=\"s2\">&quot;</span>\n</code></pre></div>\n\n<p>For example this could be the output when requesting <code>\"G:4:Dataset:65432\"</code>:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;children&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"nt\">&quot;class&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Image&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;G:4:Image:1311448&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;label&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;4321_mko_ctx_77.tif&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;somebody&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;children&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"nt\">&quot;class&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Image&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;G:4:Image:1566150&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;label&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;test-image.tif&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;somebody&quot;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n\n<h3 id=\"downloading-an-image-from-omero\">Downloading an image from OMERO</h3>\n\n<p>This will fetch the second image from the example tree above and store it in <code>/tmp/</code>:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>ome-hrm <span class=\"se\">\\</span>\n    --user <span class=\"nv\">$OMEROUSER</span> <span class=\"se\">\\</span>\n    --password <span class=\"nv\">$OMEROPW</span> <span class=\"se\">\\</span>\n    OMEROtoHRM <span class=\"se\">\\</span>\n    --imageid <span class=\"s2\">&quot;G:4:Image:1566150&quot;</span> <span class=\"se\">\\</span>\n    --dest /tmp/\n</code></pre></div>\n\n<h3 id=\"uploading-an-image-from-the-local-file-system-to-omero\">Uploading an image from the local file system to OMERO</h3>\n\n<p>The command below will import a local image file into the example dataset from above:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>ome-hrm <span class=\"se\">\\</span>\n    --user <span class=\"nv\">$OMEROUSER</span> <span class=\"se\">\\</span>\n    --password <span class=\"nv\">$OMEROPW</span> <span class=\"se\">\\</span>\n    HRMtoOMERO <span class=\"se\">\\</span>\n    --dset <span class=\"s2\">&quot;G:4:Dataset:65432&quot;</span> <span class=\"se\">\\</span>\n    --file test-image.tif\n</code></pre></div>\n\n<h1 id=\"developing-the-hrm-omero-connector\">Developing the HRM-OMERO connector</h1>\n\n<h2 id=\"using-poetry\">Using poetry</h2>\n\n<p>The project is using <a href=\"https://python-poetry.org/\">poetry</a> for packaging and dependency management. To set up a\ndevelopment environment use this command, it will set up a fresh <em>virtual environment</em>\nwith the correct dependencies and install the project in <strong><em>editable</em></strong> mode:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>git clone https://github.com/imcf/hrm-omero\n<span class=\"nb\">cd</span> hrm-omero\npoetry install\n</code></pre></div>\n\n<h2 id=\"installing-a-pre-release-from-testpypi\">Installing a pre-release from TestPyPI</h2>\n\n<p>To make dependency resolution work with the test repository a command like this can be\nused:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>pip install <span class=\"se\">\\</span>\n    -i https://test.pypi.org/simple/ <span class=\"se\">\\</span>\n    --extra-index-url https://pypi.org/simple <span class=\"se\">\\</span>\n    hrm-omero<span class=\"o\">==</span><span class=\"m\">0</span>.3.2.dev0\n</code></pre></div>\n\n<h2 id=\"generating-documentation\">Generating Documentation</h2>\n\n<p>The project is using <a href=\"https://pdoc.dev/\">pdoc</a> for generating API documentation. To update or (re-)\ngenerate the HTML documentation use this <code>poetry</code> command:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>poetry run pdoc --docformat numpy --output-directory docs/ src/hrm_omero/\n</code></pre></div>\n\n<h2 id=\"todo-list\">ToDo list</h2>\n\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> use \"key-value pairs\" for the HRM job parameter summaries</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> trees for different groups\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> (REJECTED) requesting groups through a commandline option</li>\n</ul></li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> logging\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> proper logging (<a href=\"https://github.com/Delgan/loguru\">loguru</a>)</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> separate logfile for the connector</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> adjust log verbosity through a parameter</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> adjust log verbosity through the configuration file</li>\n</ul></li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> allow debug logging of the \"omero import\" call\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> (REJECTED) requested through a command line argument</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> through the configuration file</li>\n</ul></li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> (REJECTED) offer download of OME-TIFFs</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> don't use a command line parameter for the OMERO password</li>\n</ul>\n\n<h1 id=\"changelog\">Changelog</h1>\n\n<h2 id=\"040\">0.4.0</h2>\n\n<h3 id=\"new\">New</h3>\n\n<ul>\n<li>An environment variable <code>OMERO_PASSWORD</code> can (and should!) now be used to supply the\nsensitive part of the user credentials that are necessary to connect to OMERO. This\navoids having the password as plain-text in the system's process list (e.g. when\ncalling <code>ps fu -e</code> or similar) and also prevents it from showing up in an annotated\nstack trace in case an uncaught exception is raised.</li>\n<li>Log level of the HRM-OMERO connector itself can now be set through the configuration\noption <code>OMERO_CONNECTOR_LOGLEVEL</code> in the HRM config file.</li>\n<li>Debug logging for the OMERO <em>import call</em> can now be requested be setting the\nconfiguration option <code>OMERO_DEBUG_LOG</code> in the HRM config file.</li>\n<li><code>hrm_omero.hrm.parse_summary()</code> has been added to provide a function for parsing the\nparameter summary from an HRM job into a (nested) dict.</li>\n<li><code>hrm_omero.hrm.parse_job_basename()</code> has been added to identify the base name of all\nfiles that belong to the set of results from a certain HRM job.</li>\n<li><code>hrm_omero.omero.add_annotation_keyvalue()</code> can be used to add so-called <a href=\"https://docs.openmicroscopy.org/omero/5.6/developers/Python.html#write-data\">Map\nAnnotations</a> (key-value pairs) to objects in OMERO.</li>\n<li><code>hrm_omero.misc.printlog()</code> can be used to push a message to the log and stdout.</li>\n<li>Unit tests using <a href=\"https://docs.pytest.org/\">pytest</a> and <a href=\"https://pypi.org/project/pytest-cov/\">pytest-cov</a> (incomplete).</li>\n</ul>\n\n<h3 id=\"changes\">Changes</h3>\n\n<ul>\n<li>Uploading images to OMERO into another group than the user's default one is now\nproperly supported.</li>\n<li>HRM job parameter summaries are now being added as OMERO <a href=\"https://docs.openmicroscopy.org/omero/5.6/developers/Python.html#write-data\">\"Map Annotations\"</a>\ninstead of simply being a comment string.</li>\n<li>The function <code>hrm_omero.omero.connect()</code> is now deprecated and will be removed in a\nsubsequent release.</li>\n<li>Functions <code>hrm_omero.transfer.to_omero()</code> and <code>hrm_omero.transfer.from_omero()</code> are\nnow raising a <code>ValueError</code> in case the provided <code>id_str</code> is malformed.</li>\n<li>Various improvements on log messages.</li>\n<li>Unit string literal <code>\u00b5m</code> is no longer converted to <code>um</code> in parameter summaries.</li>\n<li>New dependencies: <a href=\"https://pypi.org/project/Pillow/\">Pillow</a></li>\n</ul>\n\n<h3 id=\"fixes\">Fixes</h3>\n\n<ul>\n<li>Thumbnail download has been adapted to recent code changes in OMERO.</li>\n</ul>\n\n<h1 id=\"api-changes\">API Changes</h1>\n\n<p>The tables below describe the API changes compared to the <a href=\"https://github.com/aarpon/hrm/blob/master/bin/ome_hrm.py\">\"integrated\" HRM-OMERO\nconnector</a> that used to be shipped with the HRM itself previously.</p>\n\n<h2 id=\"hrm_config2\"><a href=\"https://github.com/aarpon/hrm/blob/master/bin/hrm_config.py\"><code>hrm_config</code></a></h2>\n\n<table>\n<thead>\n<tr>\n  <th><code>hrm_config</code></th>\n  <th><code>hrm_omero</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>parse_hrm_conf()</code></td>\n  <td><code>hrm.parse_config()</code></td>\n</tr>\n<tr>\n  <td><code>check_hrm_conf()</code></td>\n  <td><code>hrm.check_config()</code></td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"ome_hrm1\"><a href=\"https://github.com/aarpon/hrm/blob/master/bin/ome_hrm.py\"><code>ome_hrm</code></a></h2>\n\n<table>\n<thead>\n<tr>\n  <th><code>ome_hrm</code></th>\n  <th><code>hrm_omero</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>omero_login()</code></td>\n  <td><code>omero.connect()</code></td>\n</tr>\n<tr>\n  <td><code>check_credentials()</code></td>\n  <td><code>omero.check_credentials()</code></td>\n</tr>\n<tr>\n  <td><code>gen_obj_dict()</code></td>\n  <td><code>tree.gen_obj_dict()</code></td>\n</tr>\n<tr>\n  <td><code>gen_children()</code></td>\n  <td><code>tree.gen_children()</code></td>\n</tr>\n<tr>\n  <td><code>gen_base_tree()</code></td>\n  <td><code>tree.gen_base_tree()</code></td>\n</tr>\n<tr>\n  <td><code>gen_group_tree()</code></td>\n  <td><code>tree.gen_group_tree()</code></td>\n</tr>\n<tr>\n  <td><code>tree_to_json()</code></td>\n  <td><code>formatting.tree_to_json()</code></td>\n</tr>\n<tr>\n  <td><code>print_children_json()</code></td>\n  <td><code>formatting.print_children_json()</code></td>\n</tr>\n<tr>\n  <td><code>gen_parameter_summary()</code></td>\n  <td><code>hrm.job_parameter_summary()</code></td>\n</tr>\n<tr>\n  <td><code>omero_to_hrm()</code></td>\n  <td><code>transfer.from_omero()</code></td>\n</tr>\n<tr>\n  <td><code>hrm_to_omero()</code></td>\n  <td><code>transfer.to_omero()</code></td>\n</tr>\n<tr>\n  <td><code>download_thumb()</code></td>\n  <td><code>transfer.fetch_thumbnail()</code></td>\n</tr>\n<tr>\n  <td><code>bool_to_exitstatus()</code></td>\n  <td><code>cli.bool_to_exitstatus()</code></td>\n</tr>\n<tr>\n  <td><code>parse_arguments()</code></td>\n  <td><code>cli.parse_arguments()</code></td>\n</tr>\n<tr>\n  <td><code>main()</code></td>\n  <td><code>cli.run_task()</code></td>\n</tr>\n</tbody>\n</table>\n"}, {"fullname": "hrm_omero.cli", "modulename": "hrm_omero.cli", "qualname": "", "type": "module", "doc": "<p>Command-line interface related functions.</p>\n"}, {"fullname": "hrm_omero.cli.bool_to_exitstatus", "modulename": "hrm_omero.cli", "qualname": "bool_to_exitstatus", "type": "function", "doc": "<p>Convert a boolean to a POSIX process exit code.</p>\n\n<p>As boolean values in Python are a subset of int, <code>True</code> corresponds to the int value\n'1', which is the opposite of a successful POSIX return code. Therefore, this\nfunction simply inverts the boolean value to turn it into a proper exit code. In\ncase the provided value is not of type <code>bool</code> it will be returned unchanged.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong> (bool or int):\nThe value to be converted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: 0 in case <code>value</code> is <code>True</code>, 1 in case <code>value</code> is <code>False</code> and <code>value</code> itself in\ncase it is not a bool.</li>\n</ul>\n", "parameters": ["value"], "funcdef": "def"}, {"fullname": "hrm_omero.cli.parse_arguments", "modulename": "hrm_omero.cli", "qualname": "parse_arguments", "type": "function", "doc": "<p>Parse the commandline arguments.</p>\n", "parameters": ["args"], "funcdef": "def"}, {"fullname": "hrm_omero.cli.verbosity_to_loglevel", "modulename": "hrm_omero.cli", "qualname": "verbosity_to_loglevel", "type": "function", "doc": "<p>Map the verbosity count to a named log level for <code>loguru</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>verbosity</strong> (int):\nVerbosity count as returned e.g. by the following argparse code:\n<code>argparser.add_argument(\"-v\", dest=\"verbosity\", action=\"count\", default=0)</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: A log level name that can be used with <code>loguru.logger.add()</code>.</li>\n</ul>\n", "parameters": ["verbosity"], "funcdef": "def"}, {"fullname": "hrm_omero.cli.run_task", "modulename": "hrm_omero.cli", "qualname": "run_task", "type": "function", "doc": "<p>Parse commandline arguments and initiate the requested tasks.</p>\n", "parameters": ["args"], "funcdef": "def"}, {"fullname": "hrm_omero.cli.main", "modulename": "hrm_omero.cli", "qualname": "main", "type": "function", "doc": "<p>Wrapper to call the run_task() function and return its exit code.</p>\n", "parameters": ["args"], "funcdef": "def"}, {"fullname": "hrm_omero.decorators", "modulename": "hrm_omero.decorators", "qualname": "", "type": "module", "doc": "<p>Decorator functions.</p>\n"}, {"fullname": "hrm_omero.decorators.connect_and_set_group", "modulename": "hrm_omero.decorators", "qualname": "connect_and_set_group", "type": "function", "doc": "<p>Decorator ensuring the connection is established and the group context is set.</p>\n\n<p>This decorator is specifically made for functions that require an established\nconnection to OMERO as well as the group for the connection / session to be switched\nexplicitly.</p>\n\n<p>Please note that a function to be decorated with this needs to have the first two\nparameters of its signature as described in the <strong>Other Parameters</strong> section below.</p>\n\n<h6 id=\"other-parameters\">Other Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe ID describing the OMERO object, e.g.\n<ul>\n<li><code>G:23:Image:42</code></li>\n<li><code>G:4:Dataset:77</code></li>\n</ul></li>\n</ul>\n", "parameters": ["func"], "funcdef": "def"}, {"fullname": "hrm_omero.formatting", "modulename": "hrm_omero.formatting", "qualname": "", "type": "module", "doc": "<p>Output formatting functions.</p>\n"}, {"fullname": "hrm_omero.formatting.tree_to_json", "modulename": "hrm_omero.formatting", "qualname": "tree_to_json", "type": "function", "doc": "<p>Create a JSON object with a given format from a tree.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj_tree</strong> (list(dict)):\nThe object tree as generated by <code>hrm_omero.tree.gen_children()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The JSON-formatted representation of the object tree.</li>\n</ul>\n", "parameters": ["obj_tree"], "funcdef": "def"}, {"fullname": "hrm_omero.formatting.print_children_json", "modulename": "hrm_omero.formatting", "qualname": "print_children_json", "type": "function", "doc": "<p>Print the child nodes of the given ID in JSON format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe OMERO object ID string, e.g. <code>G:23:Image:42</code> or <code>ROOT</code> (to generate the\nbase tree).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True in case printing the nodes was successful, False otherwise.</li>\n</ul>\n", "parameters": ["conn", "id_str"], "funcdef": "def"}, {"fullname": "hrm_omero.group", "modulename": "hrm_omero.group", "qualname": "", "type": "module", "doc": "<p>OMERO group related functions.</p>\n"}, {"fullname": "hrm_omero.group.set_session_group", "modulename": "hrm_omero.group", "qualname": "set_session_group", "type": "function", "doc": "<p>Validate the ID string and set the requested group for the connection / session.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe ID describing the OMERO object, e.g.\n<ul>\n<li><code>G:23:Image:42</code></li>\n<li><code>G:4:Dataset:77</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str, str</strong>: A tuple of strings denoting the target OMERO object type and ID.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: Raised if a malformed <code>id_str</code> is passed.</li>\n</ul>\n", "parameters": ["conn", "id_str"], "funcdef": "def"}, {"fullname": "hrm_omero.hrm", "modulename": "hrm_omero.hrm", "qualname": "", "type": "module", "doc": "<p>Helper functions to interact with the HRM.</p>\n"}, {"fullname": "hrm_omero.hrm.parse_config", "modulename": "hrm_omero.hrm", "qualname": "parse_config", "type": "function", "doc": "<p>Assemble a dict from the HRM config file (shell syntax).</p>\n\n<p>Usually, the config is located at /etc/hrm.conf and written in shell syntax as\nthis file simply gets sourced by the bash init script and other shell based\ntools.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nThe name of the configuration file to be parsed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dict with the parsed configuration items.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>SyntaxError</strong>: Raised in case the given configuration file can't be parsed correctly.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parse_config</span><span class=\"p\">(</span><span class=\"s1\">&#39;/etc/hrm.conf&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_DATA&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/export/hrm_data&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_DEST&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;dst&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_HOME&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/var/www/hrm&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_LOG&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/var/log/hrm&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HRM_SOURCE&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;src&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;OMERO_HOSTNAME&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;omero.mynetwork.xy&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;OMERO_PKG&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/opt/OMERO/OMERO.server&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;OMERO_PORT&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;4064&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;PHP_CLI&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/usr/local/php/bin/php&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;SUSER&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;hrm&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n</code></pre></div>\n", "parameters": ["filename"], "funcdef": "def"}, {"fullname": "hrm_omero.hrm.check_config", "modulename": "hrm_omero.hrm", "qualname": "check_config", "type": "function", "doc": "<p>Check the config dict for required entries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config</strong> (dict):\nA dict with a parsed configuration, as returned by <code>parse_hrm_conf()</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>SyntaxError</strong>: Raised in case one of the required configuration items is missing.</li>\n</ul>\n", "parameters": ["config"], "funcdef": "def"}, {"fullname": "hrm_omero.hrm.job_parameter_summary", "modulename": "hrm_omero.hrm", "qualname": "job_parameter_summary", "type": "function", "doc": "<p>Generate a parameter summary text from the HRM-generated HTML file.</p>\n\n<p>Call the parser for the HTML file generated by the HRM containing the parameter\nsummary and generate a plain-text version from the parsed results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fname</strong> (str):\nThe filename of the job's HTML parameter summary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The formatted string containing the parameter summary.</li>\n</ul>\n", "parameters": ["fname"], "funcdef": "def"}, {"fullname": "hrm_omero.hrm.parse_job_basename", "modulename": "hrm_omero.hrm", "qualname": "parse_job_basename", "type": "function", "doc": "<p>Parse the basename from an HRM job result file name.</p>\n\n<p>HRM job IDs are generated via PHP's <code>uniqid()</code> call that is giving a 13-digit\nhexadecimal string (8 digits UNIX time and 5 digits microsconds). The HRM labels its\nresult files by appending an underscore (<code>_</code>) followed by this ID and an <code>_hrm</code>\nsuffix. This function tries to match this section and remove everything <em>after</em> it\nfrom the name.</p>\n\n<p>Its intention is to safely remove the suffix from an image file name while taking no\nassumptions about how the suffix looks like (could e.g. be <code>.ics</code>, <code>.ome.tif</code> or\nsimilar).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fname</strong> (str):\nThe input string, usually the name of an HRM result file (but any string is\naccepted).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The input string (<code>fname</code>) where everything <em>after</em> an HRM-like job label (e.g.\n<code>_abcdef0123456_hrm</code> or <code>_f435a27b9c85e_hrm</code>) is removed. In case the input\nstring does <em>not</em> contain a matching section it is returned</li>\n</ul>\n", "parameters": ["fname"], "funcdef": "def"}, {"fullname": "hrm_omero.hrm.parse_summary", "modulename": "hrm_omero.hrm", "qualname": "parse_summary", "type": "function", "doc": "<p>Parse the job parameter summary generated by HRM into a dict.</p>\n\n<p>Parse the HTML file generated by the HRM containing the parameter summary and\ngenerate a nested dict from it. The HTML file is assumed to contain three <code>&lt;table&gt;</code>\nitems that contain a single <code>&lt;td class=\"header\"&gt;</code> item with the title and a <code>&lt;tr&gt;</code>\nsection with four <code>&lt;td&gt;</code> items per parameter (being <em>parameter-name</em>, <em>channel</em>,\n<em>source</em> and <em>value</em>), e.g. something of this form:</p>\n\n<pre><code>|___________________title___________________|\n|_________________(ignored)_________________|\n| parameter-name | channel | source | value |\n...\n| parameter-name | channel | source | value |\n---------------------------------------------\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fname</strong> (str):\nThe filename of the job's HTML parameter summary or (e.g.) the resulting image\nfile. In case <code>fname</code> doesn't end in the common parameter summary suffix (for\nexample if the image file name was provided), the function tries to derive the\nname of summary file and use that one for parsing.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict(dict)</strong>: A dict with the parsed section names (table titles) being the keys, each\ncontaining another dict with the parameter names as keys (including the channel\nunless the parameter is channel-independent). See the example below.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parse_summary</span><span class=\"p\">(</span><span class=\"s1\">&#39;image_001.parameters.txt&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;Image Parameters&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Emission wavelength (nm) [ch:0]&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;567.000&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Excitation wavelength (nm) [ch:0]&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;456.000&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Lens refractive index [ch:0]&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;4.567&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Microscope type [ch:0]&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;widefield&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Numerical aperture [ch:0]&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2.345&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Point Spread Function&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;theoretical&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Sample refractive index [ch:0]&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;3.456&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Time interval (s)&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1.000000&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;X pixel size (\u03bcm)&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;0.123456&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Y pixel size (\u03bcm)&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;0.123456&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Z step size (\u03bcm)&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;0.234567&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;Restoration Parameters&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Autocrop&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;no&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Background estimation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;auto&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Deconvolution algorithm&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;iiff&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Number of iterations&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;42&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Quality stop criterion&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;0.000007&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Signal/Noise ratio [ch:0]&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;99&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n</code></pre></div>\n", "parameters": ["fname"], "funcdef": "def"}, {"fullname": "hrm_omero.misc", "modulename": "hrm_omero.misc", "qualname": "", "type": "module", "doc": "<p>Miscellaneous functions used across the package.</p>\n"}, {"fullname": "hrm_omero.misc.printlog", "modulename": "hrm_omero.misc", "qualname": "printlog", "type": "function", "doc": "<p>Simple wrapper to push a message to stdout and logging.</p>\n\n<p>Note that something very similiar (or identical) could be achieved by adding a log\nhandler that emits to stdout.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>level</strong> (str):\nThe log level of the message as defined by loguru.</li>\n<li><strong>message</strong> (str):\nThe message to be printed and logged.</li>\n</ul>\n", "parameters": ["level", "message"], "funcdef": "def"}, {"fullname": "hrm_omero.omero", "modulename": "hrm_omero.omero", "qualname": "", "type": "module", "doc": "<p>Functions related to direct interaction with OMERO.</p>\n"}, {"fullname": "hrm_omero.omero.connect", "modulename": "hrm_omero.omero", "qualname": "connect", "type": "function", "doc": "<p>Establish the connection to an OMERO server.</p>\n\n<p>NOTE: this does NOT check credentials - it only talks to the OMERO server to create\nthe connection object. To verify a login, use <code>check_credentials()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>user</strong> (str):\nThe OMERO user name (e.g. <code>demo_user_01</code>).</li>\n<li><strong>passwd</strong> (str):\nThe corresponding OMERO user password.</li>\n<li><strong>host</strong> (str):\nThe OMERO server hostname or IP address.</li>\n<li><strong>port</strong> (int, optional):\nThe OMERO port number, by default 4064.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>omero.gateway.BlitzGateway</strong>: The OMERO connection object.</li>\n</ul>\n", "parameters": ["user", "passwd", "host", "port"], "funcdef": "def"}, {"fullname": "hrm_omero.omero.check_credentials", "modulename": "hrm_omero.omero", "qualname": "check_credentials", "type": "function", "doc": "<p>Check if supplied credentials are valid and print a message to stdout.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe connection object as returned by <code>connect()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if connecting was successful (i.e. credentials are correct), False\notherwise.</li>\n</ul>\n", "parameters": ["conn"], "funcdef": "def"}, {"fullname": "hrm_omero.omero.extract_image_id", "modulename": "hrm_omero.omero", "qualname": "extract_image_id", "type": "function", "doc": "<p>Parse the YAML returned by an 'omero import' call and extract the image ID.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fname</strong> (str):\nThe path to the <code>yaml</code> file to parse.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int or None</strong>: The OMERO ID of the newly imported image, e.g. <code>1568386</code> or <code>None</code> in case\nparsing the file failed for any reason.</li>\n</ul>\n", "parameters": ["fname"], "funcdef": "def"}, {"fullname": "hrm_omero.omero.add_annotation_keyvalue", "modulename": "hrm_omero.omero", "qualname": "add_annotation_keyvalue", "type": "function", "doc": "<p>Add a key-value \"map\" annotation to an OMERO object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe ID describing the target OMERO object, e.g.\n<ul>\n<li><code>G:23:Image:42</code></li>\n<li><code>G:4:Dataset:77</code></li>\n</ul></li>\n<li><strong>annotation</strong> (dict(dict)):\nThe map annotation as returned by <code>hrm_omero.hrm.parse_summary()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True in case of success, False otherwise.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>: Raised in case re-establishing the OMERO connection fails.</li>\n</ul>\n", "parameters": ["conn", "id_str", "annotation"], "funcdef": "def"}, {"fullname": "hrm_omero.omero.add_annotation_tag", "modulename": "hrm_omero.omero", "qualname": "add_annotation_tag", "type": "function", "doc": "<p></p>\n", "parameters": ["conn", "gid", "annotation", "obj_id", "obj_type", "desc"], "funcdef": "def"}, {"fullname": "hrm_omero.transfer", "modulename": "hrm_omero.transfer", "qualname": "", "type": "module", "doc": "<p>Transfer related functions.</p>\n"}, {"fullname": "hrm_omero.transfer.from_omero", "modulename": "hrm_omero.transfer", "qualname": "from_omero", "type": "function", "doc": "<p>Download the corresponding original file(s) from an image ID.</p>\n\n<p>This only works for image IDs that were created with OMERO 5.0 or later as previous\nversions don't have an \"original file\" linked to an image.</p>\n\n<p>Note that files will be downloaded with their original name, which is not\nnecessarily the name shown by OMERO, e.g. if an image name was changed in OMERO. To\nkeep filesets consistent, we have to preserve the original names!</p>\n\n<p>In addition to the original file(s), it also downloads a thumbnail of the requested\nfile from OMERO and puts it into the appropriate place so HRM will show it as a\npreview until the user hits \"re-generate preview\".</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe ID of the OMERO image (e.g. <code>G:23:Image:42</code>).</li>\n<li><strong>dest</strong> (str):\nThe destination path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True in case the download was successful, False otherwise.</li>\n</ul>\n", "parameters": ["conn", "id_str", "dest"], "funcdef": "def"}, {"fullname": "hrm_omero.transfer.fetch_thumbnail", "modulename": "hrm_omero.transfer", "qualname": "fetch_thumbnail", "type": "function", "doc": "<p>Download the thumbnail of a given image from OMERO.</p>\n\n<p>OMERO provides thumbnails for stored images, this function downloads the thumbnail\nimage and places it as preview in the corresponding HRM directory.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>image_id</strong> (str):\nAn OMERO object ID of an image (e.g. '102').</li>\n<li><strong>dest</strong> (str):\nThe destination filename.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True in case the download was successful, False otherwise.</li>\n</ul>\n", "parameters": ["conn", "image_id", "dest"], "funcdef": "def"}, {"fullname": "hrm_omero.transfer.to_omero", "modulename": "hrm_omero.transfer", "qualname": "to_omero", "type": "function", "doc": "<p>Upload an image into a specific dataset in OMERO.</p>\n\n<p>In case we know from the suffix that a given  format is not supported by OMERO, the\nupload will not be initiated at all (e.g. for SVI-HDF5, having the suffix '.h5').</p>\n\n<p>The import itself is done by instantiating the CLI class, assembling the required\narguments, and finally running <code>cli.invoke()</code>. This eventually triggers the\n<code>importer()</code> method defined in <a href=\"https://github.com/ome/omero-py/blob/master/src/omero/plugins/import.py\">OMERO's Python bindings</a>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe ID of the target dataset in OMERO (e.g. <code>G:7:Dataset:23</code>).</li>\n<li><strong>image_file</strong> (str):\nThe local image file including the full path.</li>\n<li><strong>omero_logfile</strong> (str, optional):\nThe prefix of files to be used to capture OMERO's <code>import</code> call stderr messages.\nIf the parameter is non-empty the <code>--debug ALL</code> option will be added to the\n<code>omero</code> call with the output being placed in the specified file. If the\nparameter is omitted or empty, debug messages will be disabled.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True in case of success, False otherwise.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>: Raised in case <code>image_file</code> is in a format that is not supported by OMERO.</li>\n<li><strong>ValueError</strong>: Raised in case <code>id_str</code> has an invalid format.</li>\n</ul>\n", "parameters": ["conn", "id_str", "image_file", "omero_logfile"], "funcdef": "def"}, {"fullname": "hrm_omero.tree", "modulename": "hrm_omero.tree", "qualname": "", "type": "module", "doc": "<p>Functions related to OMERO's tree view.</p>\n"}, {"fullname": "hrm_omero.tree.gen_obj_dict", "modulename": "hrm_omero.tree", "qualname": "gen_obj_dict", "type": "function", "doc": "<p>Create a dict from an OMERO object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong> (omero.gateway._*Wrapper):\nThe OMERO object to process.</li>\n<li><strong>id_pfx</strong> (str, optional):\nA string prefix that will be added to the <code>id</code> value, by default ''.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary with the following structure:</li>\n</ul>\n\n<pre><code>    {\n        'children': [],\n        'id': 'Project:1154',\n        'label': 'HRM_TESTDATA',\n        'owner': u'demo01',\n        'class': 'Project'\n    }\n</code></pre>\n", "parameters": ["obj", "id_pfx"], "funcdef": "def"}, {"fullname": "hrm_omero.tree.gen_children", "modulename": "hrm_omero.tree", "qualname": "gen_children", "type": "function", "doc": "<p>Get the children for a given node.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>id_str</strong> (str):\nThe OMERO object ID string, e.g. <code>G:23:Image:42</code> or <code>ROOT</code> (to generate the\nbase tree).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list with children nodes (of type <code>dict</code>), having the <code>load_on_demand</code>\nproperty set to <code>True</code> required by the jqTree JavaScript library.</li>\n</ul>\n", "parameters": ["conn", "id_str"], "funcdef": "def"}, {"fullname": "hrm_omero.tree.gen_base_tree", "modulename": "hrm_omero.tree", "qualname": "gen_base_tree", "type": "function", "doc": "<p>Generate all group trees with their members as the basic tree.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of grouptree dicts as generated by <code>gen_group_tree()</code>.</li>\n</ul>\n", "parameters": ["conn"], "funcdef": "def"}, {"fullname": "hrm_omero.tree.gen_group_tree", "modulename": "hrm_omero.tree", "qualname": "gen_group_tree", "type": "function", "doc": "<p>Create the tree nodes for a group and its members.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong> (omero.gateway.BlitzGateway):\nThe OMERO connection object.</li>\n<li><strong>group</strong> (omero.gateway._ExperimenterGroupWrapper, optional):\nThe group object to generate the tree for, by default None which will result in\nthe group being derived from the current connection's context.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A nested dict of the given group (or the default group if not specified\nexplicitly) and its members as a list of dicts in the <code>children</code> item, starting\nwith the current user as the first entry.</li>\n</ul>\n", "parameters": ["conn", "group"], "funcdef": "def"}]